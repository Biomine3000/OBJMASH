#!/usr/bin/env python3
# -*- mode: Python; indent: 4 -*-
import socket as socket_module
import time
import select
import json
import logging
import sys
import collections

METADATA_MAX_SIZE = 2048
PAYLOAD_MAX_SIZE = 10485760 # 10 megabytes
SELECT_TIMEOUT = 10

# Data structures and helpers
Client = collections.namedtuple("Client", ["address", "send_buffer", "receive_buffer", "disconnected"])

def with_send_buffer(client, buffer):
    return Client(address=client.address,
                  send_buffer=buffer,
                  receive_buffer=client.receive_buffer,
                  disconnected=client.disconnected)

def with_receive_buffer(client, buffer):
    return Client(address=client.address,
                  send_buffer=client.send_buffer,
                  receive_buffer=buffer,
                  disconnected=client.disconnected)

def make_client(address):
    return Client(address=address, send_buffer=bytes(), receive_buffer=bytes(), disconnected=False)

def disconnect_client(client):
    return Client(address=client.address,
                  send_buffer=client.send_buffer,
                  receive_buffer=client.receive_buffer,
                  disconnected=True)


def remove_disconnected(clients, logger):
    disconnected = {client_socket:clients[client_socket]
                    for client_socket in clients
                    if clients[client_socket].disconnected}

    for client_socket, client in disconnected.items():
        logger.warn("Disconnecting {0}".format(client))
        client_socket.close()

    return {client_socket:clients[client_socket]
            for client_socket in clients
            if not clients[client_socket].disconnected}


def main():
    # Set up logging
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(sys.argv[0])

    # Open listening socket
    listening_socket = socket_module.socket(socket_module.AF_INET, socket_module.SOCK_STREAM)
    listening_socket.bind(("localhost", 7890))
    listening_socket.listen(5)

    reading_sockets = [listening_socket]
    writing_sockets = []
    exceptional_sockets = []

    initial_clients = {}
    current_clients = initial_clients
    while True:
        logger.debug(repr([reading_sockets, writing_sockets, exceptional_sockets]))
        (reading_sockets,
         writing_sockets,
         exceptional_sockets) = select.select(reading_sockets,
                                              writing_sockets,
                                              exceptional_sockets, SELECT_TIMEOUT)
        logger.debug(repr([reading_sockets, writing_sockets, exceptional_sockets]))

        for reading_socket in reading_sockets:
            if reading_socket not in current_clients:
                client_socket, address = reading_socket.accept()
                client_socket.setblocking(False)
                current_clients[client_socket] = make_client(address)
                logger.debug("New client {0}".format(current_clients[client_socket]))
            else:
                try:
                    incoming_objects, disconnect = handle_read(reading_socket, current_clients[reading_socket])
                except Exception as e:
                    logger.warning("handle_read, client {0}: {1}".format(client, e))
                    disconnect = True
                finally:
                    if disconnect:
                        current_clients[reading_socket] = disconnect_client(client)

        for writing_socket in writing_sockets:
            client = current_clients[writing_socket]
            try:
                disconnect = handle_write(writing_socket, client)
            except Exception as e:
                logger.warning("handle_write, client {0}: {1}".format(client, e))
                disconnect = True
            finally:
                if disconnect:
                    current_clients[writing_socket] = disconnect_client(client)

        for exceptional_socket in exceptional_sockets:
            # TODO: what is this good for?
            pass

        current_clients = remove_disconnected(current_clients, logger)

        reading_sockets = [listening_socket]
        writing_sockets = []
        exceptional_sockets = []
        for client_socket, client in current_clients.items():
            reading_sockets.append(client_socket)

            if len(client.send_buffer) > 0:
                writing_sockets.append(client_socket)

            # TODO: exceptional?

        logger.debug('----')

if __name__ == '__main__':
    main()
