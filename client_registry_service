#!/usr/bin/env python3
# -*- coding: utf-8; mode: Python; indent: 4 -*-
import sys; assert sys.version > '3'
import logging
import json

from obj_mash import BusinessObject, service_connection_loop

def handle_event(request, own_routing_id=None, state=None, logger=None):
    clients = state
    event = request.metadata.get('event', None)

    if event not in ['routing/subscribe/notification', 'routing/disconnect',
                     'services/request']:
        return state, None

    if event == 'routing/subscribe/notification':
        client = {'routing-id': request.metadata['routing-id'],
                  'client': 'no-client',
                  'user': 'no-user'}
        logger.info("New client: {0}".format(client))
        clients[request.metadata['routing-id']] = client
        return state, None
    elif event == 'routing/disconnect':
        if request.metadata['routing-id'] in clients:
            del clients[request.metadata['routing-id']]
        logger.info("Client {0} disconnected".format(request.metadata['routing-id']))
        return state, None
    elif event == 'services/request':
        service = request.metadata.get('service', request.metadata.get('name', None))
        if service == 'clients':
            request_type = request.metadata.get('request')
            if request_type == 'list':
                client_routing_id = request.metadata['route'][0]
                logger.info("List request from {0}".format(clients[client_routing_id]))
                metadata = {'event': 'services/reply',
                            'in-reply-to': request.metadata['id'],
                            'to': client_routing_id }

                payload_contents = clients
                payload = json.dumps(payload_contents, ensure_ascii=False).encode('utf-8')
                metadata['size'] = len(payload)
                return state, BusinessObject(metadata, payload)
            elif request_type == 'join':
                client_routing_id = request.metadata['route'][0]
                client_software = request.metadata.get('client', 'no-client')
                user = request.metadata.get('user', 'no-user')

                clients[client_routing_id] = {'routing-id': client_routing_id,
                                              'client': client_software,
                                              'user': user}

                logger.info("Join request from {0}".format(clients[client_routing_id]))

                metadata = {'event': 'services/reply',
                            'in-reply-to': request.metadata['id'],
                            'to': client_routing_id}
                return state, BusinessObject(metadata, None)
    return state, None

if __name__ == '__main__':
    host = 'localhost'
    port = 7890

    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("client_registry_service")

    client_dict = {}
    service_connection_loop(host, port, event_handler=handle_event,
                            state=client_dict, logger=logger)
